
var roleCarrier = {

    /** @param {Creep} creep **/
    run: function(creep) {
        if(creep.memory.working && creep.carry.energy == 0) {
            creep.memory.working = false;
            creep.say('üîÑ witdraw');
	    }
	    if(!creep.memory.working && creep.carry.energy == creep.carryCapacity) {
	        creep.memory.working = true;
	        creep.say('‚ôªÔ∏ètransfer');
	    }

	   
	    if(!creep.memory.working) {
            if(creep.pos.findClosestByRange(FIND_DROPPED_RESOURCES) !=null) {
                if(creep.pickup(creep.pos.findClosestByRange(FIND_DROPPED_RESOURCES)) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(creep.pos.findClosestByRange(FIND_DROPPED_RESOURCES) );
                }
            }
            else if (creep.memory.containerout!=null){
                if (creep.withdraw(creep.memory.containerout, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE){
                    creep.moveTo(creep.memory.containerout, {visualizePathStyle: {stroke: '#ffaa00'}});
                }
    	    }
            else if(creep.memory.storageout!=null&&creep.memory.storageout!=''){
                if(creep.withdraw(creep.memory.storageout, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(creep.memory.storageout, {visualizePathStyle: {stroke: '#ffaa00'}});
                        
                }
            }
                
    	    
    	    
        
	    }
        else {
            if(creep.transfer(creep.memory.target, RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(creep.memory.target,  {visualizePathStyle: {stroke: '#ffffff'}});
            }
            
        }

        
	}
};

module.exports = roleCarrier;
