/*
 * Module code goes here. Use 'module.exports' to export things:
 * module.exports.thing = 'a thing';
 *
 * You can import it from another modules like this:
 * var mod = require('memory');
 * mod.thing == 'a thing'; // true
*/
function swap(json){
  var ret = {};
  for(var key in json){
    ret[json[key]] = key;
  }
  return ret;
}


var memories = {
    run: function(creep) {
    	    if(creep.room.find(FIND_MY_STRUCTURES, {filter: {structureType: STRUCTURE_SPAWN}})== false){
    	        creep.memory.sameRmSpawn = false
    	    }
    	    else{
    	        creep.memory.sameRmSpawn = true
    	    }

            creep.memory.source = creep.pos.findClosestByPath(FIND_SOURCES, {filter: (s) => s.energy>0})
            creep.memory.containerout = creep.pos.findClosestByPath(FIND_STRUCTURES, {
                    filter: (structure) => 
                        structure.structureType == STRUCTURE_CONTAINER && structure.store[RESOURCE_ENERGY] >0
            })
            creep.memory.storageout = creep.pos.findClosestByPath(FIND_STRUCTURES, {
                    filter: (structure) => 
                        structure.structureType == STRUCTURE_STORAGE && structure.store[RESOURCE_ENERGY] >0
            })

             if (creep.memory.pastRoom[0]!=creep.room.name){
                creep.memory.expand = false
                creep.memory.pastRoom.unshift(creep.room.name)
                if(creep.memory.pastRoom.length >3){
                    creep.memory.pastRoom.pop()
                }
            }
            else if (creep.memory.pastRoom == null||creep.room.name=='E52N53'){
                creep.memory.pastRoom.length=0
                creep.memory.pastRoom[0]=creep.room.name
            }

            creep.memory.expandTo = Object.values(Game.map.describeExits(creep.room.name))
            if(creep.memory.pastRoom.length>1){
                creep.memory.expandTo.splice(creep.memory.expandTo.indexOf(creep.memory.pastRoom[1]),1)
            }
            


                
                creep.memory.route2=[]  
                for(let i=0; i<creep.memory.expandTo.length; i++){
                    creep.memory.route2.push(Number(swap(Game.map.describeExits(creep.room.name))[creep.memory.expandTo[i]]))
                }
                creep.memory.route4=[]
                for(let i=0; i<creep.memory.route2.length; i++){
                    creep.memory.route4.push(creep.room.find(creep.memory.route2[i]))[0]
                }
            
                creep.memory.route5 = creep.pos.findClosestByPath(Array.prototype.concat.apply([],creep.memory.route4))
                
        
                

            
            if(creep.memory.role == 'harvester') {
                creep.memory.containerin = creep.pos.findClosestByPath(FIND_STRUCTURES, {
                    filter: (structure) => 
                        structure.structureType == STRUCTURE_CONTAINER
                        && structure.store[RESOURCE_ENERGY] < structure.storeCapacity
                 })
                 if (creep.memory.containerin!=null){
                    creep.memory.target = creep.memory.containerin
                }
                else {
                    creep.memory.target =creep.pos.findClosestByPath(FIND_STRUCTURES, {
                    filter: (structure) => 
                        (structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_SPAWN) 
                        &&structure.energy < structure.energyCapacity
                    })
                }
                
            };
            
            if(creep.memory.role == 'builder') {

                creep.memory.target = creep.pos.findClosestByPath(FIND_CONSTRUCTION_SITES);
            }
            if(creep.memory.role == 'upgrader') {
        	    creep.memory.target =  creep.pos.findClosestByPath(FIND_MY_STRUCTURES,{filter: {structureType: STRUCTURE_CONTROLLER}}, {ignoreCreeps: true})
            }
            if(creep.memory.role == 'attacker') {
        	    creep.memory.target =  creep.pos.findClosestByPath(FIND_HOSTILE_CREEPS);
            }
            if(creep.memory.role == 'repairer') {
               
                    creep.memory.target=creep.room.find(FIND_STRUCTURES,{
                        filter: (structure)  => structure.structureType != STRUCTURE_WALL && structure.hits < structure.hitsMax
                    })
                    creep.memory.target.sort((a,b) => (b.hitsMax - b.hits)-(a.hitsMax - a.hits));
                    creep.memory.target.length=5
                    creep.memory.target = creep.pos.findClosestByPath(creep.memory.target)
            }
             if(creep.memory.role == 'carrier') {
        	    creep.memory.target =creep.pos.findClosestByPath(FIND_STRUCTURES, {
                    filter: (structure) => 
                        (structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_SPAWN) 
                        &&structure.energy < structure.energyCapacity
                })
                if (creep.memory.target == null ){
                    creep.memory.target = creep.pos.findClosestByPath(FIND_STRUCTURES, {
                    filter: (structure) => 
                        structure.structureType == STRUCTURE_STORAGE && structure.store[RESOURCE_ENERGY] < structure.storeCapacity
                    })
                }
            }
            
             
            
        }
}
module.exports = memories;
